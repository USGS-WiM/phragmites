// Generated by Web Inormatics and Mapping on 2018-01-04 using generator-wim 0.0.1
var allLayers;
var defaultExtent = [ -83.481, 45.625];
var zoomLevel = 


require([
    'esri/map',
    'esri/dijit/HomeButton',
    'esri/dijit/LocateButton',
    'esri/geometry/webMercatorUtils',
    'dojo/on',
    'dojo/domReady!'
], function (
    Map,
    HomeButton,
    LocateButton,
    webMercatorUtils,
    on) {
        app.map = new Map('mapDiv', {
            basemap: 'gray',  //For full list of pre-defined basemaps, navigate to http://arcg.is/1JVo6Wd
            center: defaultExtent, // longitude, latitude
            zoom: 6
        });

        //basemap toggles
        $(document).ready(function () {
            $('#btnStreets').click(function () {
                app.map.setBasemap('streets');
                ga('send', {
                    hitType: 'event',
                    eventCategory: 'Basemap',
                    eventAction: 'click',
                    eventLabel: 'Streets'
                });
            });
            $('#btnSatellite').click(function () {
                app.map.setBasemap('satellite');
                ga('send', {
                    hitType: 'event',
                    eventCategory: 'Basemap',
                    eventAction: 'click',
                    eventLabel: 'Satellite'
                });
            });
            $('#btnTopo').click(function () {
                app.map.setBasemap('topo');
                ga('send', {
                    hitType: 'event',
                    eventCategory: 'Basemap',
                    eventAction: 'click',
                    eventLabel: 'Topo'
                });
            });
            $('#btnTerrain').click(function () {
                app.map.setBasemap('terrain');
                ga('send', {
                    hitType: 'event',
                    eventCategory: 'Basemap',
                    eventAction: 'click',
                    eventLabel: 'Terrain'
                });
            });
            $('#btnGray').click(function () {
                app.map.setBasemap('gray');
                ga('send', {
                    hitType: 'event',
                    eventCategory: 'Basemap',
                    eventAction: 'click',
                    eventLabel: 'Gray'
                });
            });
            $('#btnNatGeo').click(function () {
                app.map.setBasemap('national-geographic');
                ga('send', {
                    hitType: 'event',
                    eventCategory: 'Basemap',
                    eventAction: 'click',
                    eventLabel: 'National Geographic'
                });
            });
        });

        //button for returning to initial extent
        var home = new HomeButton({
            map: app.map
        }, 'homeButton');
        home.startup();
        //button for finding and zooming to user's location
        var locate = new LocateButton({
            map: app.map
        }, 'locateButton');
        locate.startup();

        //mobile menu toggle
        $('#mobile-main-menu').click(function () {
            $('body').toggleClass('isOpenMenu');
        });

        // Modals
        $(document).ready(function () {
            function showModal() {
                $('#geosearchModal').modal('show');
            }

            $('#geosearchButton').click(function () {
                showModal();
            });

            //about modal toggle
            $('#aboutButton').click(function () {
                $('#aboutModal').modal('show');
            });

            $('#geosearchButton').click(function () {
                showModal();
            });

            $('#userGuideButton').click(function () {
                $('#userGuideModal').modal('show');
            });
            
            $('#faqButton').click(function () {
                $('#faqModal').modal('show');
            });

        });

        // USGS Search
        search_api.create("geosearch", {
            on_result: function (o) {
                // what to do when a location is found
                // o.result is geojson point feature of location with properties
                // zoom to location
                require(["esri/geometry/Extent"], function (Extent) {
                    var noExtents = ["GNIS_MAJOR", "GNIS_MINOR", "ZIPCODE", "AREACODE"];
                    var noExtentCheck = noExtents.indexOf(o.result.properties["Source"])
                    $("#geosearchModal").modal('hide');
                    if (noExtentCheck == -1) {
                        app.map.setExtent(
                            new esri.geometry.Extent({
                                xmin: o.result.properties.LonMin,
                                ymin: o.result.properties.LatMin,
                                xmax: o.result.properties.LonMax,
                                ymax: o.result.properties.LatMax,
                                spatialReference: { "wkid": 4326 }
                            }),
                            true
                        );
                    } else {
                        require(["esri/geometry/Point"], function (Point) {
                            app.map.centerAndZoom(
                                new Point(o.result.properties.Lon, o.result.properties.Lat),
                                12
                            );
                        });
                    }
                });

            },
            "include_usgs_sw": true,
            "include_usgs_gw": true,
            "include_usgs_sp": true,
            "include_usgs_at": true,
            "include_usgs_ot": true,
            "include_huc2": true,
            "include_huc4": true,
            "include_huc6": true,
            "include_huc8": true,
            "include_huc10": true,
            "include_huc12": true,

            on_failure: function (o) {
                $("#test").html("Sorry, a location could not be found in search for '" + o.val() + "'");
                $("#invalidSearchLocationModal").modal('show');
            }
        });

        //set app version
        $('#aboutModalTitle').append(' <small>v' + app.version + '</small>');

        //displays map scale on map load
        app.map.on("load", function () {
            var scale = app.map.getScale().toFixed(0);
            $('#scale')[0].innerHTML = addCommas(scale);
            var initMapCenter = webMercatorUtils.webMercatorToGeographic(app.map.extent.getCenter());
            $('#latitude').html(initMapCenter.y.toFixed(3));
            $('#longitude').html(initMapCenter.x.toFixed(3));
        });

        //displays map scale on scale change (i.e. zoom level)
        app.map.on('zoom-end', function () {
            var scale = app.map.getScale().toFixed(0);
            $('#scale')[0].innerHTML = addCommas(scale);
        });

        //updates lat/lng indicator on mouse move. does not apply on devices w/out mouse. removes 'map center' label
        app.map.on('mouse-move', function (cursorPosition) {
            $('#mapCenterLabel').css('display', 'none');
            if (cursorPosition.mapPoint != null) {
                var geographicMapPt = webMercatorUtils.webMercatorToGeographic(cursorPosition.mapPoint);
                $('#latitude').html(geographicMapPt.y.toFixed(3));
                $('#longitude').html(geographicMapPt.x.toFixed(3));
            }
        });
        //updates lat/lng indicator to map center after pan and shows 'map center' label.
        app.map.on('pan-end', function () {
            //displays latitude and longitude of map center
            $('#mapCenterLabel').css('display', 'inline');
            var geographicMapCenter = webMercatorUtils.webMercatorToGeographic(app.map.extent.getCenter());
            $('#latitude').html(geographicMapCenter.y.toFixed(3));
            $('#longitude').html(geographicMapCenter.x.toFixed(3));
        });


        // All code for handling IE warning popup
        if (navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0) {
            $("#IEwarningModal").modal('show');
        } else {
            return false;
        }
        // End IE warning code
    });

    // FAQ Modal controls.
    $('#faq1header').click(function () { $('#faq1body').slideToggle(250); });
    $('#faq2header').click(function () { $('#faq2body').slideToggle(250); });
    $('#faq3header').click(function () { $('#faq3body').slideToggle(250); });
    $('#faq4header').click(function () { $('#faq4body').slideToggle(250); });
    $('#faq5header').click(function () { $('#faq5body').slideToggle(250); });
    $('#faq6header').click(function () { $('#faq6body').slideToggle(250); });
    $('#faq7header').click(function () { $('#faq7body').slideToggle(250); });
    $('#faq8header').click(function () { $('#faq8body').slideToggle(250); });
    $('#faq9header').click(function () { $('#faq9body').slideToggle(250); });
    $('#faq10header').click(function () { $('#faq10body').slideToggle(250); });
    $('#faq11header').click(function () { $('#faq11body').slideToggle(250); });
    $('#faq12header').click(function () { $('#faq12body').slideToggle(250); });
    $('#faq13header').click(function () { $('#faq13body').slideToggle(250); });
    $('#faq14header').click(function () { $('#faq14body').slideToggle(250); });
    $('#faq15header').click(function () { $('#faq15body').slideToggle(250); });
    $('#faq16header').click(function () { $('#faq16body').slideToggle(250); });
    $('#faq17header').click(function () { $('#faq17body').slideToggle(250); });
    $('#faq18header').click(function () { $('#faq18body').slideToggle(250); });
    $('#faq19header').click(function () { $('#faq19body').slideToggle(250); });
    $('#faq20header').click(function () { $('#faq20body').slideToggle(250); });
    $('#faq21header').click(function () { $('#faq21body').slideToggle(250); });
    $('#faq22header').click(function () { $('#faq22body').slideToggle(250); });
    $('#faq23header').click(function () { $('#faq23body').slideToggle(250); });
    $('#faq24header').click(function () { $('#faq24body').slideToggle(250); });
    $('#faq25header').click(function () { $('#faq25body').slideToggle(250); });
    $('#faq26header').click(function () { $('#faq26body').slideToggle(250); });
    $('#faq27header').click(function () { $('#faq27body').slideToggle(250); });
    $('#faq28header').click(function () { $('#faq28body').slideToggle(250); });

    // Rotating arrows when FAQ is clicked
    $("#faq1header").click(function () {
        if ($("#angle1").css("transform") == 'none') {
            $("#angle1").css("transform", "rotate(90deg)");
        } else {
            $("#angle1").css("transform", "");
        }
    });
    $("#faq2header").click(function () {
        //alert($( this ).css( "transform" ));
        if ($("#angle2").css("transform") == 'none') {
            $("#angle2").css("transform", "rotate(90deg)");
        } else {
            $("#angle2").css("transform", "");
        }
    });
    $("#faq3header").click(function () {
        //alert($( this ).css( "transform" ));
        if ($("#angle3").css("transform") == 'none') {
            $("#angle3").css("transform", "rotate(90deg)");
        } else {
            $("#angle3").css("transform", "");
        }
    });
    $("#faq4header").click(function () {
        //alert($( this ).css( "transform" ));
        if ($("#angle4").css("transform") == 'none') {
            $("#angle4").css("transform", "rotate(90deg)");
        } else {
            $("#angle4").css("transform", "");
        }
    });
    $("#faq5header").click(function () {
        //alert($( this ).css( "transform" ));
        if ($("#angle5").css("transform") == 'none') {
            $("#angle5").css("transform", "rotate(90deg)");
        } else {
            $("#angle5").css("transform", "");
        }
    });
    $("#faq6header").click(function () {
        //alert($( this ).css( "transform" ));
        if ($("#angle6").css("transform") == 'none') {
            $("#angle6").css("transform", "rotate(90deg)");
        } else {
            $("#angle6").css("transform", "");
        }
    });
    $("#faq7header").click(function () {
        //alert($( this ).css( "transform" ));
        if ($("#angle7").css("transform") == 'none') {
            $("#angle7").css("transform", "rotate(90deg)");
        } else {
            $("#angle7").css("transform", "");
        }
    });
    $("#faq8header").click(function () {
        //alert($( this ).css( "transform" ));
        if ($("#angle8").css("transform") == 'none') {
            $("#angle8").css("transform", "rotate(90deg)");
        } else {
            $("#angle8").css("transform", "");
        }
    });
    $("#faq9header").click(function () {
        //alert($( this ).css( "transform" ));
        if ($("#angle9").css("transform") == 'none') {
            $("#angle9").css("transform", "rotate(90deg)");
        } else {
            $("#angle9").css("transform", "");
        }
    });
    $("#faq10header").click(function () {
        //alert($( this ).css( "transform" ));
        if ($("#angle10").css("transform") == 'none') {
            $("#angle10").css("transform", "rotate(90deg)");
        } else {
            $("#angle10").css("transform", "");
        }
    });
    

    require([
        'esri/dijit/Legend',
        'esri/tasks/locator',
        'esri/tasks/query',
        'esri/tasks/QueryTask',
        'esri/graphicsUtils',
        'esri/geometry/Point',
        'esri/geometry/Extent',
        'esri/layers/ArcGISDynamicMapServiceLayer',
        'esri/layers/FeatureLayer',
        'esri/layers/RasterLayer',
        'esri/SpatialReference',
        'esri/layers/WMSLayer',
        'esri/layers/WMSLayerInfo',
        "esri/layers/WebTiledLayer",
        'dijit/form/CheckBox',
        'dijit/form/RadioButton',
        'dojo/query',
        'dojo/dom',
        'dojo/dom-class',
        'dojo/dom-construct',
        'dojo/dom-style',
        'dojo/on'
    ], function (
        Legend,
        Locator,
        Query,
        QueryTask,
        graphicsUtils,
        Point,
        Extent,
        ArcGISDynamicMapServiceLayer,
        FeatureLayer,
        RasterLayer,
        SpatialReference,
        WMSLayer,
        WMSLayerInfo,
        WebTiledLayer,
        CheckBox,
        RadioButton,
        query,
        dom,
        domClass,
        domConstruct,
        domStyle,
        on
    ) {

            var legendLayers = [];
            var layersObject = [];
            var layerArray = [];
            var staticLegendImage;
            var identifyTask, identifyParams;
            var navToolbar;
            var locator;

            //create global layers lookup
            var mapLayers = [];

            $.each(allLayers, function (index, group) {
                console.log('processing: ', group.groupHeading)


                //sub-loop over layers within this groupType
                $.each(group.layers, function (layerName, layerDetails) {

                    var legendLayerName = layerName;
                    if (legendLayerName == "pest layer" || legendLayerName == "Eco Sites layer" || legendLayerName == "WRTDS Concentration Sites" || legendLayerName == "WRTDS Flux Sites") {
                        legendLayerName = "Trend results";
                    }
                    //check for exclusiveGroup for this layer
                    var exclusiveGroupName = '';
                    if (layerDetails.wimOptions.exclusiveGroupName) {
                        exclusiveGroupName = layerDetails.wimOptions.exclusiveGroupName;
                    }

                    if (layerDetails.wimOptions.layerType === 'agisFeature') {
                        var layer = new FeatureLayer(layerDetails.url, layerDetails.options);
                        if (layerDetails.wimOptions.renderer !== undefined) {
                            layer.setRenderer(layerDetails.wimOptions.renderer);
                        }
                        //check if include in legend is true
                        if (layerDetails.wimOptions && layerDetails.wimOptions.includeLegend == true) {
                            legendLayers.push({ layer: layer, title: legendLayerName });
                        }
                        addLayer(group.groupHeading, group.showGroupHeading, layer, layerName, exclusiveGroupName, layerDetails.options, layerDetails.wimOptions);
                        //addMapServerLegend(layerName, layerDetails);
                    }

                    else if (layerDetails.wimOptions.layerType === 'agisWMS') {
                        var layer = new WMSLayer(layerDetails.url, { resourceInfo: layerDetails.options.resourceInfo, visibleLayers: layerDetails.options.visibleLayers }, layerDetails.options);
                        //check if include in legend is true
                        if (layerDetails.wimOptions && layerDetails.wimOptions.includeLegend == true) {
                            legendLayers.push({ layer: layer, title: legendLayerName });
                        }
                        //map.addLayer(layer);
                        addLayer(group.groupHeading, group.showGroupHeading, layer, layerName, exclusiveGroupName, layerDetails.options, layerDetails.wimOptions);
                        //addMapServerLegend(layerName, layerDetails);
                    }

                    else if (layerDetails.wimOptions.layerType === 'webTiledLayer') {
                        var layer = new WebTiledLayer(layerDetails.url, layerDetails.options);
                        //check if include in legend is true
                        if (layerDetails.wimOptions && layerDetails.wimOptions.includeLegend == true) {
                            legendLayers.push({ layer: layer, title: legendLayerName });
                        }
                        //map.addLayer(layer);
                        addLayer(group.groupHeading, group.showGroupHeading, layer, layerName, exclusiveGroupName, layerDetails.options, layerDetails.wimOptions);
                        //addMapServerLegend(layerName, layerDetails);
                    }

                    else if (layerDetails.wimOptions.layerType === 'agisDynamic') {
                        var layer = new ArcGISDynamicMapServiceLayer(layerDetails.url, layerDetails.options);
                        //check if include in legend is true
                        if (layerDetails.visibleLayers) {
                            layer.setVisibleLayers(layerDetails.visibleLayers);
                        }
                        if (layerDetails.wimOptions && layerDetails.wimOptions.layerDefinitions) {
                            var layerDefs = [];
                            $.each(layerDetails.wimOptions.layerDefinitions, function (index, def) {
                                layerDefs[index] = def;
                            });
                            layer.setLayerDefinitions(layerDefs);
                        }
                        if (layerDetails.wimOptions && layerDetails.wimOptions.includeLegend == true) {
                            legendLayers.push({ layer: layer, title: legendLayerName });
                        }
                        //map.addLayer(layer);
                        addLayer(group.groupHeading, group.showGroupHeading, layer, layerName, exclusiveGroupName, layerDetails.options, layerDetails.wimOptions);
                        //addMapServerLegend(layerName, layerDetails);
                    }

                    else if (layerDetails.wimOptions.layerType === 'agisImage') {
                        var layer = new ArcGISImageServiceLayer(layerDetails.url, layerDetails.options);
                        //check if include in legend is true
                        if (layerDetails.wimOptions && layerDetails.wimOptions.includeLegend == true) {
                            legendLayers.push({ layer: layer, title: legendLayerName });
                        }
                        if (layerDetails.visibleLayers) {
                            layer.setVisibleLayers(layerDetails.visibleLayers);
                        }
                        //map.addLayer(layer);
                        addLayer(group.groupHeading, group.showGroupHeading, layer, layerName, exclusiveGroupName, layerDetails.options, layerDetails.wimOptions);
                        //addMapServerLegend(layerName, layerDetails);
                    }
                });
            });

            function addLayer(groupHeading, showGroupHeading, layer, layerName, exclusiveGroupName, options, wimOptions) {

                //add layer to map
                //layer.addTo(map);
                app.map.addLayer(layer);

                //add layer to layer list
                mapLayers.push([exclusiveGroupName, camelize(layerName), layer]);

                //check if its an exclusiveGroup item
                if (exclusiveGroupName) {

                    if (!$('#' + camelize(exclusiveGroupName)).length) {
                        var exGroupRoot;
                        if (exclusiveGroupName == "Data Source") {
                            var exGroupRoot = $('<div id="' + camelize(exclusiveGroupName + " Root") + '" class="btn-group-vertical lyrTog" style="cursor: pointer;" data-toggle="buttons"> <button type="button" class="btn btn-default active" aria-pressed="true" style="font-weight: bold;text-align: left"><i class="glyphspan fa fa-check-square-o"></i>&nbsp;&nbsp;' + exclusiveGroupName + '<span id="info' + camelize(exclusiveGroupName) + '" title="Data Source identifies the scale, year and emulsion of the imagery that was used to map the wetlands and riparian areas for a given area. It also identifies areas that have Scalable data, which is an interim data product in areas of the nation where standard compliant wetland data is not yet available. Click for more info on Scalable data." class="glyphspan glyphicon glyphicon-question-sign pull-right"></span><span id="opacity' + camelize(exclusiveGroupName) + '" style="padding-right: 5px" class="glyphspan glyphicon glyphicon-adjust pull-right"></span></button> </div>');
                        } else {
                            var exGroupRoot = $('<div id="' + camelize(exclusiveGroupName + " Root") + '" class="btn-group-vertical lyrTog" style="cursor: pointer;" data-toggle="buttons"> <button type="button" class="btn btn-default active" aria-pressed="true" style="font-weight: bold;text-align: left"><i class="glyphspan fa fa-check-square-o"></i>&nbsp;&nbsp;' + exclusiveGroupName + '</button> </div>');
                        }

                        exGroupRoot.click(function (e) {
                            exGroupRoot.find('i.glyphspan').toggleClass('fa-check-square-o fa-square-o');

                            $.each(mapLayers, function (index, currentLayer) {

                                var tempLayer = app.map.getLayer(currentLayer[2].id);

                                if (currentLayer[0] == exclusiveGroupName) {
                                    if ($("#" + currentLayer[1]).find('i.glyphspan').hasClass('fa-dot-circle-o') && exGroupRoot.find('i.glyphspan').hasClass('fa-check-square-o')) {
                                        console.log('adding layer: ', currentLayer[1]);
                                        app.map.addLayer(currentLayer[2]);
                                        var tempLayer = app.map.getLayer(currentLayer[2].id);
                                        tempLayer.setVisibility(true);
                                    } else if (exGroupRoot.find('i.glyphspan').hasClass('fa-square-o')) {
                                        console.log('removing layer: ', currentLayer[1]);
                                        //map.removeLayer(currentLayer[2]);
                                        var tempLayer = app.map.getLayer(currentLayer[2].id);
                                        tempLayer.setVisibility(false);
                                    }
                                }

                            });
                        });

                        var exGroupDiv = $('<div id="' + camelize(exclusiveGroupName) + '" class="btn-group-vertical" data-toggle="buttons"></div>');
                        $('#toggle').append(exGroupDiv);
                        console.log('here');
                    }

                    //create radio button
                    //var button = $('<input type="radio" name="' + camelize(exclusiveGroupName) + '" value="' + camelize(layerName) + '"checked>' + layerName + '</input></br>');
                    if (layer.visible) {
                        var button = $('<div id="' + camelize(layerName) + '" class="btn-group-vertical lyrTog radioTog" style="cursor: pointer;" data-toggle="buttons"> <label class="btn btn-default"  style="font-weight: bold;text-align: left"> <input type="radio" name="' + camelize(exclusiveGroupName) + '" autocomplete="off"><i class="glyphspan fa fa-dot-circle-o ' + camelize(exclusiveGroupName) + '"></i>&nbsp;&nbsp;' + layerName + '</label> </div>');
                    } else {
                        var button = $('<div id="' + camelize(layerName) + '" class="btn-group-vertical lyrTog radioTog" style="cursor: pointer;" data-toggle="buttons"> <label class="btn btn-default"  style="font-weight: bold;text-align: left"> <input type="radio" name="' + camelize(exclusiveGroupName) + '" autocomplete="off"><i class="glyphspan fa fa-circle-o ' + camelize(exclusiveGroupName) + '"></i>&nbsp;&nbsp;' + layerName + '</label> </div>');
                    }

                    $('#' + camelize(exclusiveGroupName)).append(button);

                    //click listener for radio button
                    button.click(function (e) {

                        if ($(this).find('i.glyphspan').hasClass('fa-circle-o')) {
                            $(this).find('i.glyphspan').toggleClass('fa-dot-circle-o fa-circle-o');

                            var newLayer = $(this)[0].id;

                            $.each(mapLayers, function (index, currentLayer) {

                                if (currentLayer[0] == exclusiveGroupName) {
                                    if (currentLayer[1] == newLayer && $("#" + camelize(exclusiveGroupName + " Root")).find('i.glyphspan').hasClass('fa-check-square-o')) {
                                        console.log('adding layer: ', currentLayer[1]);
                                        app.map.addLayer(currentLayer[2]);
                                        var tempLayer = app.map.getLayer(currentLayer[2].id);
                                        tempLayer.setVisibility(true);
                                        ////$('#' + camelize(currentLayer[1])).toggle();
                                    }
                                    else if (currentLayer[1] == newLayer && $("#" + camelize(exclusiveGroupName + " Root")).find('i.glyphspan').hasClass('fa-square-o')) {
                                        console.log('group heading not checked');
                                    }
                                    else {
                                        console.log('removing layer: ', currentLayer[1]);
                                        //map.removeLayer(currentLayer[2]);
                                        var tempLayer = app.map.getLayer(currentLayer[2].id);
                                        tempLayer.setVisibility(false);
                                        if ($("#" + currentLayer[1]).find('i.glyphspan').hasClass('fa-dot-circle-o')) {
                                            $("#" + currentLayer[1]).find('i.glyphspan').toggleClass('fa-dot-circle-o fa-circle-o');
                                        }
                                        //$('#' + camelize(this[1])).toggle();
                                    }
                                }
                            });
                        }
                    });
                }

                ////not an exclusive group item
                else if (wimOptions.includeInLayerList) {

                    //create layer toggle
                    //var button = $('<div align="left" style="cursor: pointer;padding:5px;"><span class="glyphspan glyphicon glyphicon-check"></span>&nbsp;&nbsp;' + layerName + '</div>');
                    if ((layer.visible && wimOptions.hasOpacitySlider !== undefined && wimOptions.hasOpacitySlider == true && wimOptions.moreinfo !== undefined && wimOptions.moreinfo)) {
                        var button = $('<div class="btn-group-vertical lyrTog" style="cursor: pointer;" data-toggle="buttons"> <button type="button" class="btn btn-default" aria-pressed="true" style="font-weight: bold;text-align: left"><i class="glyphspan fa fa-check-square-o"></i>&nbsp;&nbsp;' + layerName + '<span id="info' + camelize(layerName) + '" title="more info" class="glyphspan glyphicon glyphicon-question-sign pull-right"></span><span id="opacity' + camelize(layerName) + '" style="padding-right: 5px" class="glyphspan glyphicon glyphicon-adjust pull-right"></span></button></div>');
                    } else if ((!layer.visible && wimOptions.hasOpacitySlider !== undefined && wimOptions.hasOpacitySlider == true && wimOptions.moreinfo !== undefined && wimOptions.moreinfo)) {
                        var button = $('<div class="btn-group-vertical lyrTog" style="cursor: pointer;" data-toggle="buttons"> <button type="button" class="btn btn-default" aria-pressed="true" style="font-weight: bold;text-align: left"><i class="glyphspan fa fa-square-o"></i>&nbsp;&nbsp;' + layerName + '<span id="info' + camelize(layerName) + '" title="more info" class="glyphspan glyphicon glyphicon-question-sign pull-right"></span><span id="opacity' + camelize(layerName) + '" style="padding-right: 5px" class="glyphspan glyphicon glyphicon-adjust pull-right"></span></button></div>');
                    } else if (layer.visible && wimOptions.hasOpacitySlider !== undefined && wimOptions.hasOpacitySlider == true) {
                        var button = $('<div class="btn-group-vertical lyrTog" style="cursor: pointer;" data-toggle="buttons"> <button type="button" class="btn btn-default" aria-pressed="true" style="font-weight: bold;text-align: left"><i class="glyphspan fa fa-check-square-o"></i>&nbsp;&nbsp;' + layerName + '<span id="info' + camelize(layerName) + '" title="more info" class="glyphspan glyphicon glyphicon-question-sign pull-right"></button></span></div>');
                    } else if ((!layer.visible && wimOptions.hasOpacitySlider !== undefined && wimOptions.hasOpacitySlider == true)) {
                        var button = $('<div class="btn-group-vertical lyrTog" style="cursor: pointer;" data-toggle="buttons"> <button type="button" class="btn btn-default active" aria-pressed="true" style="font-weight: bold;text-align: left"><i class="glyphspan fa fa-square-o"></i>&nbsp;&nbsp;' + layerName + '<span id="opacity' + camelize(layerName) + '" class="glyphspan glyphicon glyphicon-adjust pull-right"></button></span></div>');
                    } else if ((layer.visible && wimOptions.moreinfo !== undefined && wimOptions.moreinfo)) {
                        var button = $('<div class="btn-group-vertical lyrTog" style="cursor: pointer;" data-toggle="buttons"> <button type="button" class="btn btn-default" aria-pressed="true" style="font-weight: bold;text-align: left"><i class="glyphspan fa fa-check-square-o"></i>&nbsp;&nbsp;' + layerName + '<span id="opacity' + camelize(layerName) + '" class="glyphspan glyphicon glyphicon-adjust pull-right"></button></span></div>');
                    } else if ((!layer.visible && wimOptions.moreinfo !== undefined && wimOptions.moreinfo)) {
                        var button = $('<div class="btn-group-vertical lyrTog" style="cursor: pointer;" data-toggle="buttons"> <button type="button" class="btn btn-default" aria-pressed="true" style="font-weight: bold;text-align: left"><i class="glyphspan fa fa-square-o"></i>&nbsp;&nbsp;' + layerName + '<span id="info' + camelize(layerName) + '" title="more info" class="glyphspan glyphicon glyphicon-question-sign pull-right"></button></span></div>');
                    } else if (layer.visible) {
                        var button = $('<div class="btn-group-vertical lyrTog" style="cursor: pointer;" data-toggle="buttons"> <button type="button" class="btn btn-default active" aria-pressed="true" style="font-weight: bold;text-align: left"><i class="glyphspan fa fa-check-square-o"></i>&nbsp;&nbsp;' + layerName + '</button></span></div>');
                    } else {
                        var button = $('<div class="btn-group-vertical lyrTog" style="cursor: pointer;" data-toggle="buttons"> <button type="button" class="btn btn-default" aria-pressed="true" style="font-weight: bold;text-align: left"><i class="glyphspan fa fa-square-o"></i>&nbsp;&nbsp;' + layerName + '</button> </div>');
                    }


                    // changing tooltip for Network Boundaries and Magnitude of change
                    $('#infonetworkBoundaries').prop('title', 'A network is a set of 20 to 30 wells selected to represent water-quality conditions in a given geographical area, aquifer, and in some cases, a specific land use. A network resampled at approximately 10-year intervals is a decadal trend network');
                    $('#infomagnitudeOfChange').prop('title', 'Click on network arrow or dot for more information');


                    //click listener for regular
                    button.click(function (e) {

                        //toggle checkmark
                        $(this).find('i.glyphspan').toggleClass('fa-check-square-o fa-square-o');
                        $(this).find('button').button('toggle');



                        //$('#' + camelize(layerName)).toggle();

                        //layer toggle
                        if (layer.visible) {
                            layer.setVisibility(false);
                        } else {
                            layer.setVisibility(true);
                        }

                        
                        

                        if (wimOptions.otherLayersToggled) {
                            $.each(wimOptions.otherLayersToggled, function (key, value) {
                                var lyr = app.map.getLayer(value);
                                lyr.setVisibility(layer.visible);
                            });
                        }

                    });
                }

                //group heading logic
                if (showGroupHeading !== undefined) {

                    //camelize it for divID
                    var groupDivID = camelize(groupHeading);

                    //check to see if this group already exists
                    if (!$('#' + groupDivID).length) {
                        //if it doesn't add the header
                        if (showGroupHeading) {
                            var groupDiv = $('<div id="' + groupDivID + '"><div id="grouphead"><strong>' + groupHeading + '</strong></div></div>');
                        } else {
                            var groupDiv = $('<div id="' + groupDivID + '"></div>');
                        }
                        $('#toggle').append(groupDiv);
                    }

                    //if it does already exist, append to it

                    if (exclusiveGroupName) {
                        //if (!exGroupRoot.length)$("#slider"+camelize(layerName))
                        $('#' + groupDivID).append(exGroupRoot);
                        $('#' + groupDivID).append(exGroupDiv);
                        if (wimOptions.moreinfo !== undefined && wimOptions.moreinfo) {
                            var id = "#info" + camelize(exclusiveGroupName);
                            var moreinfo = $(id);
                            moreinfo.click(function (e) {
                                window.open(wimOptions.moreinfo, "_blank");
                                e.preventDefault();
                                e.stopPropagation();
                            });
                        }
                        if ($("#opacity" + camelize(exclusiveGroupName)).length > 0) {
                            var id = "#opacity" + camelize(exclusiveGroupName);
                            var opacity = $(id);
                            opacity.click(function (e) {
                                e.preventDefault();
                                e.stopPropagation();
                                $(".opacitySlider").remove();
                                var currOpacity = app.map.getLayer(options.id).opacity;
                                var slider = $('<div class="opacitySlider"><label id="opacityValue">Opacity: ' + currOpacity + '</label><label class="opacityClose pull-right">X</label><input id="slider" type="range"></div>');
                                $("body").append(slider);
                                $("#slider")[0].value = currOpacity * 100;
                                $(".opacitySlider").css('left', event.clientX - 180);
                                $(".opacitySlider").css('top', event.clientY - 50);

                                $(".opacitySlider").mouseleave(function () {
                                    $(".opacitySlider").remove();
                                });

                                $(".opacityClose").click(function () {
                                    $(".opacitySlider").remove();
                                });
                                $('#slider').change(function (event) {
                                    //get the value of the slider with this call
                                    var o = ($('#slider')[0].value) / 100;
                                    console.log("o: " + o);
                                    $("#opacityValue").html("Opacity: " + o)
                                    app.map.getLayer(options.id).setOpacity(o);

                                    if (wimOptions.otherLayersToggled) {
                                        $.each(wimOptions.otherLayersToggled, function (key, value) {
                                            var lyr = app.map.getLayer(value);
                                            lyr.setOpacity(o);
                                        });
                                    }
                                    //here I am just specifying the element to change with a "made up" attribute (but don't worry, this is in the HTML specs and supported by all browsers).
                                    //var e = '#' + $(this).attr('data-wjs-element');
                                    //$(e).css('opacity', o)
                                });

                            });
                        }
                    } else {
                        $('#' + groupDivID).append(button);
                        if (wimOptions.moreinfo !== undefined && wimOptions.moreinfo) {
                            var id = "#info" + camelize(layerName);
                            var moreinfo = $(id);
                            moreinfo.click(function (e) {
                                window.open(wimOptions.moreinfo, "_blank");
                                e.preventDefault();
                                e.stopPropagation();
                            });
                        }
                        if ($("#opacity" + camelize(layerName)).length > 0) {
                            $("#opacity" + camelize(layerName)).click(function (e) {
                                e.preventDefault();
                                e.stopPropagation();
                                $(".opacitySlider").remove();
                                var currOpacity = app.map.getLayer(options.id).opacity;
                                var slider = $('<div class="opacitySlider"><label id="opacityValue">Opacity: ' + currOpacity + '</label><label class="opacityClose pull-right">X</label><input id="slider" type="range"></div>');
                                $("body").append(slider);[0]

                                $("#slider")[0].value = currOpacity * 100;
                                $(".opacitySlider").css('left', event.clientX - 180);
                                $(".opacitySlider").css('top', event.clientY - 50);

                                $(".opacitySlider").mouseleave(function () {
                                    $(".opacitySlider").remove();
                                });

                                $(".opacityClose").click(function () {
                                    $(".opacitySlider").remove();
                                });
                                $('#slider').change(function (event) {
                                    //get the value of the slider with this call
                                    var o = ($('#slider')[0].value) / 100;
                                    console.log("o: " + o);
                                    $("#opacityValue").html("Opacity: " + o)
                                    app.map.getLayer(options.id).setOpacity(o);

                                    if (wimOptions.otherLayersToggled) {
                                        $.each(wimOptions.otherLayersToggled, function (key, value) {
                                            var lyr = app.map.getLayer(value);
                                            lyr.setOpacity(o);
                                        });
                                    }
                                    //here I am just specifying the element to change with a "made up" attribute (but don't worry, this is in the HTML specs and supported by all browsers).
                                    //var e = '#' + $(this).attr('data-wjs-element');
                                    //$(e).css('opacity', o)
                                });
                            });
                        }
                    }
                }

                else {
                    //otherwise append
                    $('#toggle').append(button);
                    if (wimOptions.moreinfo !== undefined && wimOptions.moreinfo) {
                        var id = "#info" + camelize(layerName);
                        var moreinfo = $(id);
                        moreinfo.click(function (e) {
                            alert(e.currentTarget.id);
                            e.preventDefault();
                            e.stopPropagation();
                        });

                    }

                }
            }

            // hiding ExclusiveGroupName in Map Layers
            $( document ).ready(function() {
                $('#testRoot').css("display", "none")
                $('#habitatRoot').css("display", "none")

            });



            //get visible and non visible layer lists
            function addMapServerLegend(layerName, layerDetails) {


                if (layerDetails.wimOptions.layerType === 'agisFeature') {

                    //for feature layer since default icon is used, put that in legend
                    var legendItem = $('<div align="left" id="' + camelize(layerName) + '"><img alt="Legend Swatch" src="https://raw.githubusercontent.com/Leaflet/Leaflet/master/dist/images/marker-icon.png" /><strong>&nbsp;&nbsp;' + layerName + '</strong></br></div>');
                    $('#legendDiv').append(legendItem);

                }

                else if (layerDetails.wimOptions.layerType === 'agisWMS') {

                    //for WMS layers, for now just add layer title
                    var legendItem = $('<div align="left" id="' + camelize(layerName) + '"><img alt="Legend Swatch" src="https://placehold.it/25x41" /><strong>&nbsp;&nbsp;' + layerName + '</strong></br></div>');
                    $('#legendDiv').append(legendItem);

                }

                else if (layerDetails.wimOptions.layerType === 'agisDynamic') {

                    //create new legend div
                    var legendItemDiv = $('<div align="left" id="' + camelize(layerName) + '"><strong>&nbsp;&nbsp;' + layerName + '</strong></br></div>');
                    $('#legendDiv').append(legendItemDiv);

                    //get legend REST endpoint for swatch
                    $.getJSON(layerDetails.url + '/legend?f=json', function (legendResponse) {

                        console.log(layerName, 'legendResponse', legendResponse);



                        //make list of layers for legend
                        if (layerDetails.options.layers) {
                            //console.log(layerName, 'has visisble layers property')
                            //if there is a layers option included, use that
                            var visibleLayers = layerDetails.options.layers;
                        }
                        else {
                            //console.log(layerName, 'no visible layers property',  legendResponse)

                            //create visibleLayers array with everything
                            var visibleLayers = [];
                            $.grep(legendResponse.layers, function (i, v) {
                                visibleLayers.push(v);
                            });
                        }

                        //loop over all map service layers
                        $.each(legendResponse.layers, function (i, legendLayer) {

                            //var legendHeader = $('<strong>&nbsp;&nbsp;' + legendLayer.layerName + '</strong>');
                            //$('#' + camelize(layerName)).append(legendHeader);

                            //sub-loop over visible layers property
                            $.each(visibleLayers, function (i, visibleLayer) {

                                //console.log(layerName, 'visibleLayer',  visibleLayer);

                                if (visibleLayer == legendLayer.layerId) {

                                    console.log(layerName, visibleLayer, legendLayer.layerId, legendLayer)

                                    //console.log($('#' + camelize(layerName)).find('<strong>&nbsp;&nbsp;' + legendLayer.layerName + '</strong></br>'))

                                    var legendHeader = $('<strong>&nbsp;&nbsp;' + legendLayer.layerName + '</strong></br>');
                                    $('#' + camelize(layerName)).append(legendHeader);

                                    //get legend object
                                    var feature = legendLayer.legend;
                                    /*
                                     //build legend html for categorized feautres
                                     if (feature.length > 1) {
                                     */

                                    //placeholder icon
                                    //<img alt="Legend Swatch" src="http://placehold.it/25x41" />

                                    $.each(feature, function () {

                                        //make sure there is a legend swatch
                                        if (this.imageData) {
                                            var legendFeature = $('<img alt="Legend Swatch" src="data:image/png;base64,' + this.imageData + '" /><small>' + this.label.replace('<', '').replace('>', '') + '</small></br>');

                                            $('#' + camelize(layerName)).append(legendFeature);
                                        }
                                    });
                                    /*
                                     }
                                     //single features
                                     else {
                                     var legendFeature = $('<img alt="Legend Swatch" src="data:image/png;base64,' + feature[0].imageData + '" /><small>&nbsp;&nbsp;' + legendLayer.layerName + '</small></br>');
    
                                     //$('#legendDiv').append(legendItem);
                                     $('#' + camelize(layerName)).append(legendFeature);
    
                                     }
                                     */
                                }
                            }); //each visible layer
                        }); //each legend item
                    }); //get legend json

                }
            }

        var legend = new Legend({
            map: app.map,
            layerInfos: legendLayers
        }, 'legendDiv');
        legend.startup();

    });//end of require statement containing legend building code
    
    
    
    